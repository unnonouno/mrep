#!/usr/bin/env python

import argparse
import sys
from multiprocessing import Pool

import miura.builder
import miura.pattern
import miura.morph
import miura.printer

def select_color(color):
    if args.color == 'never':
        is_color_mode = False
    elif args.color == 'always':
        is_color_mode = True
    elif args.color == 'auto':
        is_color_mode = sys.stdout.isatty()

    if is_color_mode:
        ESCAPE = '\033[%sm'
        RED = ESCAPE % '31'
        ENDC = ESCAPE % '0'
        return (RED, ENDC)
    else:
        return ('', '')

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='MIURA: morpheme i u regexp a')
    parser.add_argument('pattern', help='pattern')
    parser.add_argument('file', nargs='*', help='data file')
    parser.add_argument('-o', '--only-matching', action='store_true',
                        help='print only matching')
    parser.add_argument('--color', type=str, choices=['never', 'auto', 'always'],
                        default='auto',
                        help='color mode. select from "never", "auto" and "always". (default: auto)')
    args = parser.parse_args()

    try:
        matcher = miura.builder.parse(args.pattern)
    except miura.builder.ParseError as e:
        sys.stderr.write('%s (@%d)\n' % (str(e), e.pos))
        sys.exit(3)

    (color_begin, color_end) = select_color(args.color)

    if args.only_matching:
        printer = miura.printer.OnlyMatchPrinter(color_begin, color_end)
    else:
        printer = miura.printer.Printer(color_begin, color_end)

    parser = miura.morph.make_mecab_parser()
    def conv(s):
        ms = parser.parse(s)
        results = miura.pattern.find(ms, matcher)
        if len(results) == 0:
            return None

        return (ms, results)

    pool = Pool()
    def run(f):
        for ret in pool.imap(conv, f):
            if ret is None:
                continue
            printer.print_result(ret[0], ret[1], sys.stdout)


    if len(args.file) > 0:
        for file in args.file:
            with open(file) as f:
                run(f)
    else:
        run(sys.stdin)

